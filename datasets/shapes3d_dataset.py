"""
Dataloader for pytorch of the dataset generated by Shapes3D.
See more at https://github.com/kopernikusai/shapes3d

Author: Mike Woodcock (mike@kopernikusauto.com)
"""

import os
import random
import numpy as np
import torch

from .mono_dataset import MonoDataset

class Shapes3DDataset(MonoDataset):
    """
        Loads the shapes 3dDataset.

        Arguments:
            - frame_idxs: the number of the frames. Default: [-1, 0, 1] it should be [a, b, c]
    """
    def __init__(self, *args, **kwargs):
        super(Shapes3dDataset, self).__init__(*args, **kwargs)

        with open(os.path.join(self.data_path, "intrinsic_matrix.txt"), 'r') as f:
            intrinsic = f.read().splitlines()
        intrinsic = [int(x) for x in intrinsic]

        self.K = np.array(intrinsic, dtype=np.float32).reshape(4,4)
        self.full_res_shape = (300, 300)
        self.frames = ['b', 'c', 'a'] # so it maps to -1->a

    def check_depth(self):
        """ Check if the dataset has depth files """
        folder, idx = self.filenames[0].split()
        depth_file = os.path.join(self.data_path, folder, idx + "_a.npy")
        return os.path.isfile(depth_file)

    def get_depth(self, folder, frame_index, side, do_flip):
        pass

    def get_color(self, folder, frame_index, side, do_flip):
        pass

    def __getitem__(self, index):
        inputs = {}
        do_flip = self.is_train and random.random() > 0.5

        folder, file_name = self.filenames[index].split()

        # Original scale image
        for idx in self.frame_idxs:
            inputs[("color", idx, -1)] = self.get_color(folder, file_name, self.frames[idx], do_flip)

        # Scaling images
        for scale in range(self.num_scales):
            # Scaling K
            K = self.K.copy()
            
            scale_matrix = np.diag([scale, scale, 1])
            K = scale_matrix @ self.K

            inv_K = np.linalg.inv(K)
            
            inputs[('K', scale)] = torch.from_numpy(K)
            inputs[('inv_K', scale)] = torch.from_numpy(inv_K)

            for idx in self.frame_idxs:
                inputs[('color', idx, scale)] = self.get_color(folder, file_name, self.frames[idx], do_flip)
            inputs('color', scale, 
